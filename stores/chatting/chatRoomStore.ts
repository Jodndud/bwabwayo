import { create } from 'zustand'
import * as StompJs from '@stomp/stompjs'
import SockJS from 'sockjs-client'
import { useAuthStore } from '../auth/authStore'
import { useNotificationStore } from '../notificationStore'

interface RoomInfo {
  roomId: number
  buyerId: string
  sellerId: string
  productId: number
}

interface addRoom {
  sellerId: string
  productId: number
}

interface ChatMessage {
  roomId: number
  senderId: string
  receiverId: string
  content: string
  type: string
  createdAt: string
  isRead: boolean
  // Í∏∞Ï°¥ ÌïÑÎìúÎì§ (Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ Ïú†ÏßÄ)
  productId?: number
  productTitle?: string
  productPrice?: number
  productImageUrl?: string
  buyerId?: number
  sellerId?: number
  token?: string
}

interface Buyer {
  id: number
  nickname: string
  profileImageUrl: string
}

interface LastMessage {
  content: string
  createdAt: string
  isRead: boolean
  receiverId: number
  roomId: number
  senderId: number
  type: string
}

interface Seller {
  avgRating: number
  dealCount: number
  id: number
  nickname: string
  profileImageUrl: string
  reviewCount: number
}

interface Product {
  canDelivery: boolean
  canDirect: boolean
  canNegotiate: boolean
  id: number
  imageUrl: string
  price: number
  saleStatus: string
  shippingFee: number
  title: string
}

interface ChatRoom {
  buyer: Buyer
  lastMessage: LastMessage
  partnerNickName: string
  product: Product
  roomId: number
  seller: Seller
  unreadCount: number
  userId: number
  userNickname: string
}

interface ChatRoomStore {
  roomInfo: RoomInfo[]
  roomList: ChatRoom[]
  messages: ChatMessage[]
  stompClient: StompJs.Client | null
  isConnected: boolean
  isConnecting: boolean
  currentSelectedRoom: ChatRoom | null
  // ÌôîÏÉÅÏ±ÑÌåÖ Í¥ÄÎ†® ÏÉÅÌÉú
  isVideoChatOpen: boolean
  videoRoomId: number | null
  videoSessionId: string | null  // ÏÑ∏ÏÖòID Ï†ÄÏû•Ïö©
  // Í±∞Îûò Í∞ÄÍ≤© Í¥ÄÎ†® ÏÉÅÌÉú
  finalPrice: number | null
  setFinalPrice: (price: number | null) => void
  addChatRoom: (addRoom: addRoom) => Promise<RoomInfo | null>
  getRoomInfo: (roomId: number) => Promise<RoomInfo | null>
  getRoomList: () => void
  setCurrentSelectedRoom: (room: ChatRoom | null) => void
  connectStomp: (roomId?: number) => void
  disconnectStomp: () => void
  appendMessage: (msg: ChatMessage, isMine: boolean) => void
  clearMessages: () => void
  // ÌôîÏÉÅÏ±ÑÌåÖ Í¥ÄÎ†® Ïï°ÏÖò
  openVideoChat: (roomId: number) => void
  closeVideoChat: () => void
  getMessageHistory: (roomId: number) => Promise<void>
  sendMessage: (roomId: number, content: string, type?: string) => void
  setVideoSessionId: (id: string | null) => void
  // ÌôîÏÉÅÏ±ÑÌåÖ ÏÑ∏ÏÖò ÏÉùÏÑ± Ìï®Ïàò Ï∂îÍ∞Ä
  createVideoSession: (roomId: number) => Promise<string | null>
  // Ï±ÑÌåÖÎ∞© Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò Ï∂îÍ∞Ä
  updateRoomList: (newRoomList: ChatRoom[]) => void

  subscribeToRoom: (roomId: number) => void
  unsubscribeFromRoom: (roomId: number) => void
  _roomSubs: Record<number, { s1?: StompJs.StompSubscription; s2?: StompJs.StompSubscription }>

}

export const useChatRoomStore = create<ChatRoomStore>((set, get) => ({
  roomInfo: [],
  roomList: [],
  messages: [] as ChatMessage[],
  stompClient: null,
  isConnected: false,
  isConnecting: false,
  currentSelectedRoom: null,
  // ÌôîÏÉÅÏ±ÑÌåÖ Í¥ÄÎ†® ÏÉÅÌÉú
  isVideoChatOpen: false,
  videoRoomId: null,
  videoSessionId: null,  // ÏÑ∏ÏÖòID Ï†ÄÏû•Ïö©
  // Í±∞Îûò Í∞ÄÍ≤© Í¥ÄÎ†® ÏÉÅÌÉú
  finalPrice: null,

  _roomSubs: {},


  subscribeToRoom: (roomId: number) => {
    const { stompClient, isConnected } = get()
    if (!stompClient || !isConnected) return

    // Í∏∞Ï°¥ Íµ¨ÎèÖ Ï†ïÎ¶¨
    const prev = get()._roomSubs[roomId]
    prev?.s1?.unsubscribe()
    prev?.s2?.unsubscribe()

    const handler = (messageOutput: StompJs.IMessage) => {
      try {
        console.log('üì© INBOUND', messageOutput.headers.destination, messageOutput.body);
        const msg = JSON.parse(messageOutput.body)
        if (!msg) return

        if (document.visibilityState === 'visible') {
           console.log('üì® Î©îÏãúÏßÄ ÏàòÏã† (ÌôúÏÑ± ÌÉ≠):', msg.content, 'from:', msg.senderId, 'roomId:', roomId);
           setTimeout(() => {
             useNotificationStore.getState().markChatAsRead(roomId);
           }, 200);
        }

        if (msg.type === 'START_VIDEOCALL' && msg.content) {
          set({ videoSessionId: msg.content })
        }
        get().appendMessage(msg, false)

        setTimeout(() => get().getRoomList(), 100)
      } catch (e) {
        console.error('Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò:', e, messageOutput.body)
      }
    }

    const s1 = stompClient.subscribe(`/sub/chat/room/${roomId}`, handler)
    const s2 = stompClient.subscribe(`/user/sub/chat/room/${roomId}`, handler)

    set(state => ({ _roomSubs: { ...state._roomSubs, [roomId]: { s1, s2 } } }))
  },

  // ‚ûç Î∞© Íµ¨ÎèÖ Ìï¥Ï†ú
  unsubscribeFromRoom: (roomId: number) => {
    const prev = get()._roomSubs[roomId]
    prev?.s1?.unsubscribe()
    prev?.s2?.unsubscribe()
    set(state => {
      const next = { ...state._roomSubs }
      delete next[roomId]
      return { _roomSubs: next }
    })
  },



  setFinalPrice: (price: number | null) => set({ finalPrice: price }),
  setVideoSessionId: (id: string | null) => set({ videoSessionId: id }),

  addChatRoom: async (addRoom: addRoom) => {
    try {
      const response = await useAuthStore.getState().authenticatedFetch(`https://i13e202.p.ssafy.io/be/api/chatrooms`, {
        method: 'POST',
        body: JSON.stringify(addRoom),
      })
      const data = await response.json()
      console.log(data)
      set({ roomInfo: data })
      return data as RoomInfo
    }
    catch (error) {
      console.error('Error adding chat room:', error)
      return null;
    }
  },

  getRoomInfo: async (roomId: number) => {
    try {
      const response = await useAuthStore.getState().authenticatedFetch(`https://i13e202.p.ssafy.io/be/api/chatrooms/${roomId}`)
      const data = await response.json()
      set({ roomInfo: [data] })
      return data as RoomInfo
    } catch (error) {
      console.error('Error getting room info:', error)
      return null;
    }
  },

  getRoomList: async () => {
    try {
      const response = await useAuthStore.getState().authenticatedFetch(`https://i13e202.p.ssafy.io/be/api/chatrooms`)
      const data = await response.json()
      // console.log('üîÑ Ï±ÑÌåÖÎ∞© Î™©Î°ù ÏàòÏã†:', data);
      set({ roomList: data })

      // ÌòÑÏû¨ URLÏùò roomIdÏôÄ ÏùºÏπòÌïòÎäî Ï±ÑÌåÖÎ∞©ÏùÑ Ï∞æÏïÑÏÑú currentSelectedRoom ÏÑ§Ï†ï
      const currentRoomId = window.location.pathname.split('/').pop();
      if (currentRoomId && data && Array.isArray(data)) {
        const matchingRoom = data.find((room: ChatRoom) => room.roomId.toString() === currentRoomId);
        if (matchingRoom) {
          set({ currentSelectedRoom: matchingRoom });
        }
      }
    } catch (error) {
      console.error('Error getting room list:', error)
    }
  },

  setCurrentSelectedRoom: (room: ChatRoom | null) => {
    set({ currentSelectedRoom: room });
  },

  connectStomp: (roomId?: number) => {
    // Ïù¥ÎØ∏ Ïó∞Í≤∞ÎêòÏóàÍ±∞ÎÇò Ïó∞Í≤∞ Ï§ëÏù¥Î©¥ Ï§ëÎ≥µ Ïã§Ìñâ Î∞©ÏßÄ
    if (get().isConnected || get().isConnecting) {
      console.log('STOMP: Ïù¥ÎØ∏ Ïó∞Í≤∞ÎêòÏóàÍ±∞ÎÇò Ïó∞Í≤∞Ïù¥ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§.');
      return;
    }

    // Ïó∞Í≤∞ ÏãúÏûë ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
    set({ isConnecting: true });

    const serverUrl = 'https://i13e202.p.ssafy.io/be/ws-stomp'

    // Ïã§Ï†ú ÏÇ¨Ïö©Ïûê ÌÜ†ÌÅ∞ ÏÇ¨Ïö©
    const accessToken = localStorage.getItem('accessToken')
    // const accessToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI0Mzc1MTI2ODM0Iiwicm9sZSI6IlVTRVIiLCJ0b2tlblR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTQzMjk4OTEsImV4cCI6MzMyNDY3OTM4OTF9.Ri8aEdsV2_37aZ9As4npi_kBvWv0ccQlUzyKweE4B-opos4h-4Ceb7OO4LQUFJp7';
    if (!accessToken) {
      console.error('‚ùå STOMP: Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§.');
      set({ isConnected: false, isConnecting: false });
      return;
    }

    try {
      const socket = new SockJS(serverUrl)
      const client = new StompJs.Client({
        webSocketFactory: () => socket,
        connectHeaders: {
          Authorization: `Bearer ${accessToken}`,
        },
        reconnectDelay: 5000,
        heartbeatIncoming: 4000,
        heartbeatOutgoing: 4000,
      });

      client.onConnect = (frame) => {
        console.log('‚úÖ STOMP: Ïó∞Í≤∞ ÏÑ±Í≥µ!', frame)
        set({ isConnected: true, isConnecting: false, stompClient: client })

        // Ï±ÑÌåÖÎ∞© Î™©Î°ù Íµ¨ÎèÖ
        client.subscribe('/user/sub/chat/roomlist', (messageOutput) => {
          try {
            const updatedRoomList = JSON.parse(messageOutput.body) as ChatRoom[];
            console.log('üìã Ï±ÑÌåÖÎ∞© Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏ ÏàòÏã†:', updatedRoomList);
            get().updateRoomList(updatedRoomList);
          } catch (error) {
            console.error('‚ùå Ï±ÑÌåÖÎ∞© Î™©Î°ù ÌååÏã± Ïò§Î•ò:', error);
          }
        });

        // ÌäπÏ†ï Ï±ÑÌåÖÎ∞© Î©îÏãúÏßÄ Íµ¨ÎèÖ
        if (roomId) get().subscribeToRoom(roomId)

        const subs = get()._roomSubs;
        Object.keys(subs).forEach((rid) => {
          const ridNum = Number(rid);
          if (!Number.isNaN(ridNum)) {
            try {
              get().subscribeToRoom(ridNum);
            } catch (e) {
              console.error('Ïû¨Íµ¨ÎèÖ Ïã§Ìå®:', ridNum, e);
            }
          }
        })
      }

      client.onStompError = (error) => {
        console.error('‚ùå STOMP: Ïó∞Í≤∞ Ïò§Î•ò', error)
        set({ isConnected: false, isConnecting: false, stompClient: null })

        // Ïó∞Í≤∞ Ïã§Ìå® Ïãú 1Ï¥à ÌõÑ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ (Îçî Îπ†Î•¥Í≤å)
        setTimeout(() => {
          console.log('üîÑ STOMP Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...')
          get().connectStomp(roomId)
        }, 1000)
      }

      client.onWebSocketError = (error) => {
        console.error('‚ùå WebSocket Ïò§Î•ò:', error)
        set({ isConnected: false, isConnecting: false, stompClient: null })
      }

      client.activate()

    } catch (error) {
      console.error('‚ùå STOMP: Ïó∞Í≤∞ ÏÑ§Ï†ï Ïã§Ìå®', error)
      set({ isConnected: false, isConnecting: false })
    }
  },

  disconnectStomp: () => {
    const { stompClient, _roomSubs } = get()

    // Íµ¨ÎèÖ Ìï¥Ï†ú
    Object.values(_roomSubs).forEach(({ s1, s2 }) => {
      try { s1?.unsubscribe() } catch { }
      try { s2?.unsubscribe() } catch { }
    })
    set({ _roomSubs: {} })

    if (stompClient) {
      stompClient.deactivate()
    }
    set({ stompClient: null, isConnected: false, isConnecting: false })
  },

  appendMessage: (msg: ChatMessage, isMine: boolean) => {
    set(state => {
      const currentMessages = Array.isArray(state.messages) ? state.messages : []

      // Î©îÏãúÏßÄ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
      if (!msg ) {
        console.warn('‚ö†Ô∏è Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Î©îÏãúÏßÄ:', msg);
        return state;
      }

      // Ï§ëÎ≥µ Î©îÏãúÏßÄ Î∞©ÏßÄ: Îçî Ï†ïÌôïÌïú Ï≤¥ÌÅ¨ (ÏãúÍ∞Ñ Î≤îÏúÑÎ•º 5Ï¥àÎ°ú ÌôïÏû•)
      const isDuplicate = currentMessages.some(existingMsg =>
        (existingMsg.type ?? '') === (msg.type ?? '') &&  
        existingMsg.content === msg.content &&
        existingMsg.senderId === msg.senderId &&
        Math.abs(new Date(existingMsg.createdAt).getTime() - new Date(msg.createdAt).getTime()) < 5000 // 5Ï¥à Ïù¥ÎÇ¥
      );

      if (isDuplicate) {
        // console.log('üîÑ Ï§ëÎ≥µ Î©îÏãúÏßÄ Í∞êÏßÄ, Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÏùå:', msg.content, 'from:', msg.senderId);
        return state;
      }

      // console.log('üìù ÏÉà Î©îÏãúÏßÄ Ï∂îÍ∞Ä (Ïã§ÏãúÍ∞Ñ):', msg.content, 'from:', msg.senderId, 'isMine:', isMine);

      // ÏÉà Î©îÏãúÏßÄÎ•º Ï∂îÍ∞ÄÌïòÍ≥† Ï¶âÏãú UI ÏóÖÎç∞Ïù¥Ìä∏
      const updatedMessages = [...currentMessages, msg];

      return {
        messages: updatedMessages
      }
    })
  },

  clearMessages: () => {
    console.log('üóëÔ∏è Î©îÏãúÏßÄ Î™©Î°ù Ï¥àÍ∏∞Ìôî');
    set({ messages: [] as ChatMessage[] });
  },

  getMessageHistory: async (roomId: number) => {
    try {
      const response = await useAuthStore.getState().authenticatedFetch(`https://i13e202.p.ssafy.io/be/api/chatrooms/${roomId}?page=0`);
      const data = await response.json();
      // console.log('üì• Î©îÏãúÏßÄ ÌûàÏä§ÌÜ†Î¶¨ ÏàòÏã†:', data);

      // Í∏∞Ï°¥ Î©îÏãúÏßÄÏôÄ ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÎ•º ÎπÑÍµêÌïòÏó¨ Ï§ëÎ≥µ Î∞©ÏßÄ
      set(state => {
        const currentMessages = Array.isArray(state.messages) ? state.messages : [];
        const newMessages = Array.isArray(data) ? data : [];

        if (currentMessages.length === 0) {
          // Ï≤´ Î°úÎìúÏù∏ Í≤ΩÏö∞ Î™®Îì† Î©îÏãúÏßÄ ÏÑ§Ï†ï
          return { messages: newMessages };
        }

        // ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÍ∞Ä Í∏∞Ï°¥ Î©îÏãúÏßÄÎ≥¥Îã§ ÎßéÏúºÎ©¥ Ï†ÑÏ≤¥ ÍµêÏ≤¥ (ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ® Îì±)
        if (newMessages.length > currentMessages.length + 5) {
          // console.log('üìù Î©îÏãúÏßÄ ÌûàÏä§ÌÜ†Î¶¨ Ï†ÑÏ≤¥ ÍµêÏ≤¥ (ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÍ∞Ä ÎßéÏùå)');
          return { messages: newMessages };
        }

        // Í∏∞Ï°¥ Î©îÏãúÏßÄÏôÄ ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÎ•º ÎπÑÍµêÌïòÏó¨ Ï§ëÎ≥µ Ï†úÍ±∞ (Îçî Ï†ïÌôïÌïú Ï≤¥ÌÅ¨)
        const uniqueNewMessages = newMessages.filter(newMsg => {
          // Í∏∞Ï°¥ Î©îÏãúÏßÄ Ï§ëÏóêÏÑú Í∞ôÏùÄ ÎÇ¥Ïö©, Í∞ôÏùÄ Î∞úÏã†Ïûê, 1Ï¥à Ïù¥ÎÇ¥Ïùò Î©îÏãúÏßÄÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
          const isDuplicate = currentMessages.some(existingMsg =>
            (existingMsg.type ?? '') === (newMsg.type ?? '') &&
            existingMsg.content === newMsg.content &&
            existingMsg.senderId === newMsg.senderId &&
            Math.abs(new Date(existingMsg.createdAt).getTime() - new Date(newMsg.createdAt).getTime()) < 1000
          );
          return !isDuplicate;
        });

        if (uniqueNewMessages.length > 0) {
          console.log('üìù ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄ Î∞úÍ≤¨:', uniqueNewMessages.length, 'Í∞ú');
          // ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÎ•º Í∏∞Ï°¥ Î©îÏãúÏßÄÏóê Ï∂îÍ∞Ä
          const updatedMessages = [...currentMessages, ...uniqueNewMessages];
          return { messages: updatedMessages };
        }

        // ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÍ∞Ä ÏóÜÏúºÎ©¥ Í∏∞Ï°¥ ÏÉÅÌÉú Ïú†ÏßÄ (ÍπúÎπ°ÏûÑ Î∞©ÏßÄ)
        return state;
      });
    } catch (error) {
      console.error(`‚ùå Ï±ÑÌåÖÎ∞© ${roomId} Î©îÏãúÏßÄ ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú Ïã§Ìå®:`, error);
      // ÏóêÎü¨ Î∞úÏÉù ÏãúÏóêÎèÑ Í∏∞Ï°¥ Î©îÏãúÏßÄÎäî Ïú†ÏßÄ
    }
  },

  sendMessage: (roomId: number, content: string, type: string = "TEXT") => {
    return new Promise<void>((resolve, reject) => {
      const { stompClient, isConnected } = get()

      if (!content.trim()) {
        console.warn('‚ö†Ô∏è Îπà Î©îÏãúÏßÄÎäî Ï†ÑÏÜ°Ìï† Ïàò ÏóÜÏäµÎãàÎã§.')
        reject(new Error('Îπà Î©îÏãúÏßÄÎäî Ï†ÑÏÜ°Ìï† Ïàò ÏóÜÏäµÎãàÎã§.'))
        return
      }

      // STOMP Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏ Î∞è Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ
      const attemptSend = async (retryCount = 0) => {
        const currentState = get()

        if (!currentState.stompClient || !currentState.isConnected) {
          if (retryCount < 3) {
            console.log(`üîÑ STOMP Ïó∞Í≤∞ ÏãúÎèÑ ${retryCount + 1}/3...`)
            try {
              currentState.connectStomp(roomId)
              // Ïó∞Í≤∞ ÎåÄÍ∏∞
              await new Promise(resolve => setTimeout(resolve, 2000))

              // Ïû¨Í∑ÄÏ†ÅÏúºÎ°ú Îã§Ïãú ÏãúÎèÑ
              attemptSend(retryCount + 1)
              return
            } catch (error) {
              console.error(`‚ùå STOMP Ïû¨Ïó∞Í≤∞ Ïã§Ìå® (ÏãúÎèÑ ${retryCount + 1}):`, error)
              if (retryCount === 2) {
                reject(new Error('STOMP Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'))
                return
              }
            }
          } else {
            console.error('‚ùå STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.')
            reject(new Error('STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'))
            return
          }
        }

        try {
          const { currentSelectedRoom } = get();
          const currentUserId = currentSelectedRoom?.userId.toString();

          // receiverId Í≤∞Ï†ï: ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä ÌåêÎß§ÏûêÏù∏ÏßÄ Íµ¨Îß§ÏûêÏù∏ÏßÄ ÌåêÎã®
          let receiverId = null;
          const sellerId = currentSelectedRoom?.seller.id.toString();
          const buyerId = currentSelectedRoom?.buyer.id.toString();

          // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä ÌåêÎß§ÏûêÏù∏ Í≤ΩÏö∞ Íµ¨Îß§ÏûêÏóêÍ≤å Ï†ÑÏÜ°
          if (currentUserId === sellerId) {
            receiverId = buyerId;
          }
          // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Íµ¨Îß§ÏûêÏù∏ Í≤ΩÏö∞ ÌåêÎß§ÏûêÏóêÍ≤å Ï†ÑÏÜ°
          else if (currentUserId === buyerId) {
            receiverId = sellerId;
          }
          // Í∑∏ Ïô∏Ïùò Í≤ΩÏö∞ (ÏòàÏÉÅÏπò Î™ªÌïú ÏÉÅÌô©)
          else {
            receiverId = sellerId;
          }

          if (!receiverId) {
            console.error('‚ùå receiverIdÎ•º Í≤∞Ï†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§.')
            reject(new Error('receiverIdÎ•º Í≤∞Ï†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§.'))
            return
          }

          // Ï¶âÏãú UIÏóê Î∞òÏòÅÌï† Î©îÏãúÏßÄ Í∞ùÏ≤¥ ÏÉùÏÑ± (ÎÇôÍ¥ÄÏ†Å ÏóÖÎç∞Ïù¥Ìä∏)
          const immediateMessage: ChatMessage = {
            roomId: roomId,
            senderId: currentUserId || '',
            receiverId: receiverId || '',
            content: content.trim(),
            type: type,
            createdAt: new Date().toISOString(),
            isRead: false
          }

          // Ï¶âÏãú Î°úÏª¨ Î©îÏãúÏßÄ Î™©Î°ùÏóê Ï∂îÍ∞Ä (ÎÇôÍ¥ÄÏ†Å ÏóÖÎç∞Ïù¥Ìä∏)
          get().appendMessage(immediateMessage, true)

          // STOMP Î©îÏãúÏßÄ ÌòïÏãù
          const stompMessage = {
            roomId: roomId,
            senderId: currentUserId, // myUserIdÎ•º senderIdÎ°ú ÏÇ¨Ïö©
            receiverId: receiverId,
            content: content.trim(),
            isRead: false,
            createdAt: new Date(),
            type: type
          }

          // console.log('üì§ STOMP Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏãúÎèÑ:', stompMessage)

          // STOMPÎ•º ÌÜµÌï¥ Î©îÏãúÏßÄ Ï†ÑÏÜ°
          currentState.stompClient!.publish({
            destination: "/pub/chat/message",
            body: JSON.stringify(stompMessage)
          })

          // console.log('‚úÖ STOMP Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å')

          // Î©îÏãúÏßÄ Ï†ÑÏÜ° ÌõÑ Ï±ÑÌåÖÎ∞© Î™©Î°ùÎèÑ Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏
          setTimeout(() => {
            get().getRoomList();
          }, 100);

          resolve()
        } catch (error) {
          console.error('‚ùå Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®:', error)
          reject(error)
        }
      }

      // Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏãúÎèÑ ÏãúÏûë
      attemptSend()
    })
  },

  // ÌôîÏÉÅÏ±ÑÌåÖ Í¥ÄÎ†® Ìï®ÏàòÎì§
  openVideoChat: (sessionId: number) => {
    console.log('üìπ ÌôîÏÉÅÏ±ÑÌåÖ Ïó¥Í∏∞:', sessionId);
    set({ isVideoChatOpen: true, videoRoomId: sessionId });
  },

  closeVideoChat: () => {
    console.log('üìπ ÌôîÏÉÅÏ±ÑÌåÖ Îã´Í∏∞');
    set({ isVideoChatOpen: false, videoRoomId: null });
    // ÏÑ∏ÏÖòIDÎäî Ïú†ÏßÄ (Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•)
  },

  // ÌôîÏÉÅÏ±ÑÌåÖ ÏÑ∏ÏÖò ÏÉùÏÑ± Ìï®Ïàò Ï∂îÍ∞Ä
  createVideoSession: async (roomId: number) => {
    try {
      const response = await useAuthStore.getState().authenticatedFetch(`https://i13e202.p.ssafy.io/be/api/sessions`, {
        method: 'POST',
        body: JSON.stringify({ videoRoomId: roomId }),
      });

      if (response.ok) {
        const sessionId = await response.text();
        console.log('‚úÖ ÌôîÏÉÅÏ±ÑÌåÖ ÏÑ∏ÏÖò ÏÉùÏÑ± ÏÑ±Í≥µ:', sessionId);
        return sessionId;
      } else {
        console.error('‚ùå ÌôîÏÉÅÏ±ÑÌåÖ ÏÑ∏ÏÖò ÏÉùÏÑ± Ïã§Ìå®');
        return null;
      }
    } catch (error) {
      console.error('‚ùå ÌôîÏÉÅÏ±ÑÌåÖ ÏÑ∏ÏÖò ÏÉùÏÑ± Ïò§Î•ò:', error);
      return null;
    }
  },

  updateRoomList: (newRoomList: ChatRoom[]) => {
    console.log('üìã Ï±ÑÌåÖÎ∞© Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏:', newRoomList);
    set({ roomList: newRoomList });

    // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ï±ÑÌåÖÎ∞©Ïù¥ ÏûàÎã§Î©¥ Ìï¥Îãπ Ï†ïÎ≥¥ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
    const { currentSelectedRoom } = get();
    if (currentSelectedRoom) {
      const updatedCurrentRoom = newRoomList.find(room => room.roomId === currentSelectedRoom.roomId);
      if (updatedCurrentRoom) {
        set({ currentSelectedRoom: updatedCurrentRoom });
      }
    }
  },

}))